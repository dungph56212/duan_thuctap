<?php
session_start();
require_once './commons/env.php';
require_once './commons/function.php';
require_once './controllers/HomeController.php';
require_once './models/SanPham.php';
require_once './models/danhmucmodels.php';

echo "<h1>Test H·ªá Th·ªëng L·ªçc S·∫£n Ph·∫©m N√¢ng Cao</h1>";

$homeController = new HomeController();
$sanPhamModel = new SanPham();

// Test 1: Ki·ªÉm tra ph∆∞∆°ng th·ª©c l·ªçc c∆° b·∫£n
echo "<h2>Test 1: Ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c l·ªçc m·ªõi</h2>";
try {
    $testFilters = [
        'search' => 's√°ch',
        'sort' => 'price-low',
        'min_price' => 50000,
        'max_price' => 500000,
        'status' => 'available'
    ];
    
    $products = $sanPhamModel->getAllProductWithFilters($testFilters);
    echo "<p>‚úÖ L·ªçc t·∫•t c·∫£ s·∫£n ph·∫©m v·ªõi filters: " . count($products) . " s·∫£n ph·∫©m</p>";
    
    // Test v·ªõi danh m·ª•c c·ª• th·ªÉ
    $categoryProducts = $sanPhamModel->getListSanPhamDanhMucWithFilters(1, $testFilters);
    echo "<p>‚úÖ L·ªçc s·∫£n ph·∫©m theo danh m·ª•c 1: " . count($categoryProducts) . " s·∫£n ph·∫©m</p>";
    
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói test l·ªçc s·∫£n ph·∫©m: " . $e->getMessage() . "</p>";
}

// Test 2: Ki·ªÉm tra ph∆∞∆°ng th·ª©c l·∫•y t√°c gi·∫£
echo "<h2>Test 2: Ki·ªÉm tra danh s√°ch t√°c gi·∫£</h2>";
try {
    $authors = $sanPhamModel->getUniqueAuthors();
    echo "<p>‚úÖ T√¨m th·∫•y " . count($authors) . " t√°c gi·∫£ duy nh·∫•t</p>";
    if (!empty($authors)) {
        echo "<ul>";
        foreach (array_slice($authors, 0, 5) as $author) {
            echo "<li>" . htmlspecialchars($author) . "</li>";
        }
        echo "</ul>";
    }
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói l·∫•y danh s√°ch t√°c gi·∫£: " . $e->getMessage() . "</p>";
}

// Test 3: Ki·ªÉm tra kho·∫£ng gi√°
echo "<h2>Test 3: Ki·ªÉm tra kho·∫£ng gi√° s·∫£n ph·∫©m</h2>";
try {
    $priceRange = $sanPhamModel->getPriceRange();
    echo "<p>‚úÖ Kho·∫£ng gi√° t·ªïng: " . number_format($priceRange['min_price']) . "ƒë - " . number_format($priceRange['max_price']) . "ƒë</p>";
    
    // Test v·ªõi danh m·ª•c c·ª• th·ªÉ
    $categoryPriceRange = $sanPhamModel->getPriceRange(1);
    echo "<p>‚úÖ Kho·∫£ng gi√° danh m·ª•c 1: " . number_format($categoryPriceRange['min_price']) . "ƒë - " . number_format($categoryPriceRange['max_price']) . "ƒë</p>";
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói l·∫•y kho·∫£ng gi√°: " . $e->getMessage() . "</p>";
}

// Test 4: Ki·ªÉm tra c√°c b·ªô l·ªçc kh√°c nhau
echo "<h2>Test 4: Ki·ªÉm tra c√°c b·ªô l·ªçc kh√°c nhau</h2>";

$filterTests = [
    ['search' => 't√¨nh', 'description' => 'T√¨m ki·∫øm v·ªõi t·ª´ kh√≥a "t√¨nh"'],
    ['sort' => 'price-high', 'description' => 'S·∫Øp x·∫øp theo gi√° cao'],
    ['status' => 'sale', 'description' => 'Ch·ªâ s·∫£n ph·∫©m ƒëang gi·∫£m gi√°'],
    ['stock_status' => 'in_stock', 'description' => 'Ch·ªâ s·∫£n ph·∫©m c√≤n nhi·ªÅu h√†ng'],
    ['min_price' => 100000, 'max_price' => 300000, 'description' => 'L·ªçc gi√° 100k-300k']
];

foreach ($filterTests as $test) {
    try {
        $products = $sanPhamModel->getAllProductWithFilters($test);
        echo "<p>‚úÖ " . $test['description'] . ": " . count($products) . " s·∫£n ph·∫©m</p>";
    } catch (Exception $e) {
        echo "<p>‚ùå L·ªói " . $test['description'] . ": " . $e->getMessage() . "</p>";
    }
}

// Test 5: Test URL parameters simulation
echo "<h2>Test 5: M√¥ ph·ªèng URL parameters</h2>";
$_GET = [
    'act' => 'san-pham-theo-danh-muc',
    'search' => 's√°ch hay',
    'sort' => 'price-low',
    'min_price' => '50000',
    'max_price' => '200000',
    'status' => 'available'
];

echo "<p>üìã M√¥ ph·ªèng URL: ?act=san-pham-theo-danh-muc&search=s√°ch+hay&sort=price-low&min_price=50000&max_price=200000&status=available</p>";

try {
    // M√¥ ph·ªèng controller call
    $filters = [
        'search' => $_GET['search'] ?? '',
        'sort' => $_GET['sort'] ?? 'default',
        'min_price' => isset($_GET['min_price']) ? (int)$_GET['min_price'] : null,
        'max_price' => isset($_GET['max_price']) ? (int)$_GET['max_price'] : null,
        'status' => $_GET['status'] ?? ''
    ];
    
    $products = $sanPhamModel->getAllProductWithFilters($filters);
    echo "<p>‚úÖ Controller simulation th√†nh c√¥ng: " . count($products) . " s·∫£n ph·∫©m</p>";
    
    // Hi·ªÉn th·ªã m·∫´u s·∫£n ph·∫©m ƒë·∫ßu ti√™n
    if (!empty($products)) {
        $firstProduct = $products[0];
        echo "<div style='border: 1px solid #ddd; padding: 10px; margin: 10px 0;'>";
        echo "<h4>" . htmlspecialchars($firstProduct['ten_san_pham']) . "</h4>";
        echo "<p>Gi√°: " . number_format($firstProduct['gia_san_pham']) . "ƒë";
        if ($firstProduct['gia_khuyen_mai']) {
            echo " (Gi·∫£m: " . number_format($firstProduct['gia_khuyen_mai']) . "ƒë)";
        }
        echo "</p>";
        if (!empty($firstProduct['tac_gia'])) {
            echo "<p>T√°c gi·∫£: " . htmlspecialchars($firstProduct['tac_gia']) . "</p>";
        }
        echo "<p>S·ªë l∆∞·ª£ng: " . $firstProduct['so_luong'] . "</p>";
        echo "<p>Danh m·ª•c: " . htmlspecialchars($firstProduct['ten_danh_muc']) . "</p>";
        echo "</div>";
    }
    
} catch (Exception $e) {
    echo "<p>‚ùå L·ªói controller simulation: " . $e->getMessage() . "</p>";
}

// Test 6: Ki·ªÉm tra performance
echo "<h2>Test 6: Ki·ªÉm tra hi·ªáu su·∫•t</h2>";
$startTime = microtime(true);

for ($i = 0; $i < 10; $i++) {
    $randomFilters = [
        'sort' => ['default', 'price-low', 'price-high', 'name', 'newest'][rand(0, 4)],
        'min_price' => rand(0, 100000),
        'max_price' => rand(200000, 1000000)
    ];
    $sanPhamModel->getAllProductWithFilters($randomFilters);
}

$endTime = microtime(true);
$executionTime = ($endTime - $startTime) * 1000; // Convert to milliseconds

echo "<p>‚úÖ Th·ªùi gian th·ª±c hi·ªán 10 truy v·∫•n l·ªçc: " . number_format($executionTime, 2) . "ms</p>";
echo "<p>‚úÖ Trung b√¨nh m·ªói truy v·∫•n: " . number_format($executionTime / 10, 2) . "ms</p>";

if ($executionTime / 10 < 100) {
    echo "<p>üöÄ Performance t·ªët (< 100ms/truy v·∫•n)</p>";
} else {
    echo "<p>‚ö†Ô∏è Performance c√≥ th·ªÉ c·∫ßn t·ªëi ∆∞u (> 100ms/truy v·∫•n)</p>";
}

echo "<h2>‚úÖ T·∫•t c·∫£ test ho√†n th√†nh!</h2>";
echo "<p><a href='" . BASE_URL . "?act=san-pham-theo-danh-muc'>Xem trang s·∫£n ph·∫©m v·ªõi b·ªô l·ªçc m·ªõi</a></p>";
?>

<style>
body {
    font-family: Arial, sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    line-height: 1.6;
}
h1, h2 {
    color: #333;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
}
p {
    margin: 10px 0;
}
ul {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
}
a {
    color: #007bff;
    text-decoration: none;
    padding: 10px 20px;
    background: #f8f9fa;
    border-radius: 5px;
    border: 1px solid #007bff;
    display: inline-block;
    margin-top: 20px;
}
a:hover {
    background: #007bff;
    color: white;
}
</style>
