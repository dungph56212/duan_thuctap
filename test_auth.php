<?php
/**
 * Authentication System Test File
 * Test c√°c ch·ª©c nƒÉng x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán
 */

session_start();
require_once 'commons/env.php';
require_once 'commons/function.php';
require_once 'commons/Security.php';

echo "<h1>Test H·ªá Th·ªëng X√°c Th·ª±c</h1>";

// Test 1: CSRF Token Generation
echo "<h2>1. Test CSRF Token</h2>";
Security::generateCSRFToken();
echo "CSRF Token ƒë√£ t·∫°o: " . ($_SESSION['csrf_token'] ?? 'Kh√¥ng t·∫°o ƒë∆∞·ª£c') . "<br>";

// Test 2: Password Strength Validation
echo "<h2>2. Test Password Strength Validation</h2>";
$testPasswords = [
    'weak' => 'abc',
    'medium' => 'Password123',
    'strong' => 'MyStr0ng!P@ssw0rd'
];

foreach ($testPasswords as $level => $password) {
    echo "<strong>Password ($level): $password</strong><br>";
    $errors = Security::validatePasswordStrength($password);
    if (empty($errors)) {
        echo "‚úÖ M·∫≠t kh·∫©u ƒë·∫°t y√™u c·∫ßu<br>";
    } else {
        echo "‚ùå L·ªói: " . implode(', ', $errors) . "<br>";
    }
    echo "<br>";
}

// Test 3: Input Sanitization
echo "<h2>3. Test Input Sanitization</h2>";
$maliciousInput = "<script>alert('XSS')</script>test@example.com";
$sanitized = Security::sanitizeInput($maliciousInput);
echo "Input g·ªëc: " . htmlspecialchars($maliciousInput) . "<br>";
echo "Sau khi sanitize: $sanitized<br><br>";

// Test 4: Password Hashing
echo "<h2>4. Test Password Hashing</h2>";
$testPassword = "MySecurePassword123!";
$hashed = Security::hashPassword($testPassword);
echo "Password g·ªëc: $testPassword<br>";
echo "Password hash: $hashed<br>";
echo "Verify password: " . (Security::verifyPassword($testPassword, $hashed) ? "‚úÖ ƒê√∫ng" : "‚ùå Sai") . "<br><br>";

// Test 5: Rate Limiting Simulation
echo "<h2>5. Test Rate Limiting</h2>";
$testEmail = "test@example.com";

echo "M√¥ ph·ªèng 6 l·∫ßn th·ª≠ ƒëƒÉng nh·∫≠p th·∫•t b·∫°i:<br>";
for ($i = 1; $i <= 6; $i++) {
    Security::recordLoginAttempt($testEmail);
    $isLimited = Security::isRateLimited($testEmail);
    echo "L·∫ßn th·ª≠ $i: " . ($isLimited ? "üîí B·ªã kh√≥a" : "‚úÖ Cho ph√©p") . "<br>";
}

$remainingTime = Security::getRemainingLockoutTime($testEmail);
echo "Th·ªùi gian c√≤n l·∫°i ƒë·ªÉ m·ªü kh√≥a: " . ceil($remainingTime / 60) . " ph√∫t<br><br>";

// Test 6: Session Security Functions
echo "<h2>6. Test Session Functions</h2>";
$_SESSION['test_error'] = "ƒê√¢y l√† l·ªói test";
$_SESSION['test_success'] = "ƒê√¢y l√† th√¥ng b√°o th√†nh c√¥ng test";
$_SESSION['flash'] = true;

echo "Notification output:<br>";
echo displayNotification();

// Clean up test data
echo "<h2>7. Clean Up</h2>";
Security::clearLoginAttempts($testEmail);
deleteSessionError();
echo "‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu test<br>";

echo "<hr>";
echo "<p><strong>K·∫øt lu·∫≠n:</strong> H·ªá th·ªëng x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c c·∫£i thi·ªán v·ªõi c√°c t√≠nh nƒÉng b·∫£o m·∫≠t n√¢ng cao.</p>";
?>

<style>
body { font-family: Arial, sans-serif; margin: 20px; }
h1 { color: #333; }
h2 { color: #666; margin-top: 30px; }
code { background: #f4f4f4; padding: 2px 4px; }
.alert { padding: 10px; margin: 10px 0; border-radius: 4px; }
.alert-success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
.alert-danger { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
</style>
